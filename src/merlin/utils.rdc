// Copyright 2022 quocdang1998
#include "merlin/utils.hpp"

#include <cinttypes>  // PRIu64
#include <ctime>  // std::localtime, std::time, std::time_t, std::tm
#include <sstream>  // std::ostringstream

#if defined(__MERLIN_WINDOWS__)
#include <windows.h>  // ::GetCurrentProcessId
#elif defined(__MERLIN_LINUX__)
#include <unistd.h>  // ::getpid
#endif

namespace merlin {

// --------------------------------------------------------------------------------------------------------------------
// System
// --------------------------------------------------------------------------------------------------------------------

// Get process ID in form of a string
std::string get_current_process_id(void) {
    std::ostringstream output;
    #if defined(__MERLIN_WINDOWS__)
    output << ::GetCurrentProcessId();
    #elif defined(__MERLIN_LINUX__)
    output << ::getpid();
    #endif
    return output.str();
}

// Get date and time in form of a string
std::string get_time(void) {
    std::ostringstream output;
    std::time_t current_carlendar_time = std::time(nullptr);
    std::tm * now = std::localtime(&current_carlendar_time);
    output << (now->tm_year + 1900) << '-' << (now->tm_mon + 1) << '-' <<  now->tm_mday << '_'
           << now->tm_hour << ':' << now->tm_min << ':' << now->tm_sec;
    return output.str();
}

// --------------------------------------------------------------------------------------------------------------------
// Multi-dimensional Index
// --------------------------------------------------------------------------------------------------------------------

// Inner product of 2 index vectors
__cuhostdev__ std::uint64_t inner_prod(const intvec & v1, const intvec & v2) {
    // check size of 2 vectors
    if (!is_same_size(v1, v2)) {
        CUHDERR(std::invalid_argument, "Size of v1 (%" PRIu64 ") and size of v2 (%" PRIu64 ") are not equal.\n",
                v1.size(), v2.size());
    }
    // calculate inner product
    std::uint64_t inner_product = 0;
    for (std::uint64_t i = 0; i < v1.size(); i++) {
        inner_product += v1[i] * v2[i];
    }
    return inner_product;
}

// Convert n-dimensional index to C-contiguous index
__cuhostdev__ std::uint64_t ndim_to_contiguous_idx(const intvec & index, const intvec & shape) {
    // check size of 2 vectors
    if (!is_same_size(index, shape)) {
        CUHDERR(std::invalid_argument, "Size of index (%" PRIu64 ") and size of shape (%" PRIu64 ") are not equal.\n",
                index.size(), shape.size());
    }
    // calculate contiguous index
    std::uint64_t result = 0, cum_prod = 1;
    if (index.size() == 0) {
        CUHDERR(std::invalid_argument, "Size of index and shape vectors are 0.\n");
    }
    result += index[index.size()-1] * cum_prod;
    for (std::int64_t i = index.size()-2; i >= 0; i--) {
        cum_prod = cum_prod * shape[i+1];
        result += index[i]*cum_prod;
    }
    return result;
}

// Convert C-contiguous index to n-dimensional index
__cuhostdev__ intvec contiguous_to_ndim_idx(std::uint64_t index, const intvec & shape) {
    // calculate index vector
    intvec index_(shape.size());
    std::uint64_t cum_prod = 1;
    if (shape.size() == 0) {
        return index_;  // empty index vector
    }
    index_[shape.size()-1] = index % shape[shape.size()-1];
    for (std::int64_t i = shape.size()-2; i >= 0; i--) {
        cum_prod = cum_prod * shape[i+1];
        index_[i] = (index / cum_prod) % shape[i];
    }
    return index_;
}

// --------------------------------------------------------------------------------------------------------------------
// Sparse Grid
// --------------------------------------------------------------------------------------------------------------------

// Get the level from a given valid size
__cuhostdev__ std::uint64_t get_level_from_valid_size(std::uint64_t size) noexcept {
    size -= 1;
    std::uint64_t level = 0;
    while (size >>= 1) {
        ++level;
    }
    return level;
}

// Get size of a sub-grid given its level vector
__cuhostdev__ std::uint64_t calc_subgrid_size(const intvec & level_vector) noexcept {
    std::uint64_t subgrid_size = 1;
    for (std::uint64_t i_dim = 0; i_dim < level_vector.size(); i_dim++) {
        const std::uint64_t & dim_level = level_vector[i_dim];
        if (dim_level == 0) {
            continue;
        }
        subgrid_size *= ((dim_level == 1) ? 2 : (1 << (dim_level-1)));
    }
    return subgrid_size;
}

// Get index of nodes in a given level of a 1D grid
__cuhostdev__ intvec hiearchical_index(std::uint64_t level, std::uint64_t size) {
    // check level validity
    std::uint64_t max_level = get_level_from_valid_size(size);
    if (level > max_level) {
        CUHDERR(std::invalid_argument, "Expected level less than %" PRIu64 ", got %" PRIu64 ".\n", max_level, level);
    }
    // trivial cases
    if (level == 0) {
        return intvec{(size - 1) / 2};
    } else if (level == 1) {
        return intvec{0, (size - 1)};
    }
    // normal cases: calculate the jump and loop over each odd number
    std::uint64_t jump = 1 << (max_level - level);
    intvec indices(1 << (level - 1));
    for (std::uint64_t i_node = 0; i_node < indices.size(); i_node++) {
        indices[i_node] = jump * (2*i_node + 1);
    }
    return indices;
}

// Get shape of Cartesian subgrid
__cuhostdev__ intvec get_level_shape(const intvec & level_vector) {
    intvec grid_shape(level_vector.size());
    for (std::uint64_t i = 0; i < level_vector.size(); i++) {
        if (level_vector[i] == 0) {
            grid_shape[i] = 1;
        } else if (level_vector[i] == 1) {
            grid_shape[i] = 2;
        } else {
            grid_shape[i] = 1 << (level_vector[i]-1);
        }
    }
    return grid_shape;
}

}  // namespace merlin
