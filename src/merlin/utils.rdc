// Copyright 2022 quocdang1998
#include "merlin/utils.hpp"

namespace merlin {

// Inner product of 2 index vectors
__cuhostdev__ std::uint64_t inner_prod(const intvec & v1, const intvec & v2) {
    // check size of 2 vectors
    #ifndef __CUDA_ARCH__
    if (v1.size() != v2.size()) {
        FAILURE(std::invalid_argument, "Size of v1 (%u) and size of v2 (%u) are not equal.\n", v1.size(), v2.size());
    }
    #endif  // __CUDA_ARCH__
    // calculate inner product
    std::uint64_t inner_product = 0;
    for (int i = 0; i < v1.size(); i++) {
        inner_product += v1[i] * v2[i];
    }
    return inner_product;
}

// Convert n-dimensional index to C-contiguous index
__cuhostdev__ std::uint64_t ndim_to_contiguous_idx(const intvec & index, const intvec & shape) {
    return inner_prod(index, shape);
}

// Convert C-contiguous index to n-dimensional index
__cuhostdev__ intvec contiguous_to_ndim_idx(std::uint64_t index, const intvec & shape) {
    // calculate index vector
    intvec index_(shape.size());
    std::uint64_t cum_prod;
    for (int i = shape.size()-1; i >= 0; i--) {
        if (i == shape.size()-1) {
            cum_prod = 1;
        } else {
            cum_prod = cum_prod * shape[i+1];
        }
        index_[i] = (index / cum_prod) % shape[i];
    }
    return index_;
}

}  // namespace merlin
