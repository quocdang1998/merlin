// Copyright 2022 quocdang1998
#include "merlin/utils.hpp"

#include <cinttypes>  // PRIu64
#include <ctime>  // std::localtime, std::time, std::time_t, std::tm
#include <sstream>  // std::ostringstream

#if defined(__MERLIN_WINDOWS__)
#include <windows.h>  // ::GetCurrentProcessId
#elif defined(__MERLIN_LINUX__)
#include <unistd.h>  // ::getpid
#endif

namespace merlin {

// --------------------------------------------------------------------------------------------------------------------
// System
// --------------------------------------------------------------------------------------------------------------------

// Get process ID in form of a string
std::string get_current_process_id(void) {
    std::ostringstream output;
    #if defined(__MERLIN_WINDOWS__)
    output << ::GetCurrentProcessId();
    #elif defined(__MERLIN_LINUX__)
    output << ::getpid();
    #endif
    return output.str();
}

std::string get_time(void) {
    std::ostringstream output;
    std::time_t current_carlendar_time = std::time(nullptr);
    std::tm * now = std::localtime(&current_carlendar_time);
    output << (now->tm_year + 1900) << '-' << (now->tm_mon + 1) << '-' <<  now->tm_mday << '_'
           << now->tm_hour << ':' << now->tm_min << ':' << now->tm_sec;
    return output.str();
}

// --------------------------------------------------------------------------------------------------------------------
// Multi-dimensional Index
// --------------------------------------------------------------------------------------------------------------------

// Inner product of 2 index vectors
__cuhostdev__ std::uint64_t inner_prod(const intvec & v1, const intvec & v2) {
    // check size of 2 vectors
    if (v1.size() != v2.size()) {
        CUHDERR(std::invalid_argument, "Size of v1 (%" PRIu64 ") and size of v2 (%" PRIu64 ") are not equal.\n",
                v1.size(), v2.size());
    }
    // calculate inner product
    std::uint64_t inner_product = 0;
    for (int i = 0; i < v1.size(); i++) {
        inner_product += v1[i] * v2[i];
    }
    return inner_product;
}

// Convert n-dimensional index to C-contiguous index
__cuhostdev__ std::uint64_t ndim_to_contiguous_idx(const intvec & index, const intvec & shape) {
    // check size of 2 vectors
    if (index.size() != shape.size()) {
        CUHDERR(std::invalid_argument, "Size of index (%" PRIu64 ") and size of shape (%" PRIu64 ") are not equal.\n",
                index.size(), shape.size());
    }
    // calculate contiguous index
    std::uint64_t result = 0, cum_prod;
    for (int i = index.size()-1; i >= 0; i--) {
        if (i == shape.size()-1) {
            cum_prod = 1;
        } else {
            cum_prod = cum_prod * shape[i+1];
        }
        result += index[i]*cum_prod;
    }
    return result;
}

// Convert C-contiguous index to n-dimensional index
__cuhostdev__ intvec contiguous_to_ndim_idx(std::uint64_t index, const intvec & shape) {
    // calculate index vector
    intvec index_(shape.size());
    std::uint64_t cum_prod;
    for (int i = shape.size()-1; i >= 0; i--) {
        if (i == shape.size()-1) {
            cum_prod = 1;
        } else {
            cum_prod = cum_prod * shape[i+1];
        }
        index_[i] = (index / cum_prod) % shape[i];
    }
    return index_;
}

}  // namespace merlin
