// Copyright quocdang1998
#include "merlin/logger.hpp"

#if defined(__MERLIN_WINDOWS__)
    #include <windows.h>  // FormatMessageA
#elif defined(__MERLIN_LINUX__)
    #include <errno.h>  // errno
    #include <string.h>  // strerror
#endif

#if defined(__MERLIN_WINDOWS__)
// Get error from Windows API
std::string throw_windows_last_error(unsigned long int last_error) {
    if (last_error != 0) {
        char * buffer = nullptr;
        const unsigned long int format = FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM
                                         | FORMAT_MESSAGE_IGNORE_INSERTS;
        unsigned long int size = ::FormatMessageA(format, nullptr, last_error,
                                                  MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
                                                  reinterpret_cast<char *>(&buffer), 0, nullptr);
        return std::string(buffer, size);
    } else {
        return std::string();
    }
}

#elif defined(__MERLIN_LINUX__)
// Get error from Linux
std::string throw_linux_last_error(void) {
    if (errno != 0) {
        char * buffer = ::strerror(errno);
        return std::string(buffer);
    } else {
        return std::string();
    }
}

#endif
