// Copyright 2023 quocdang1998
#include "merlin/candy/optimizer.hpp"

#include <array>        // std::array
#include <type_traits>  // std::add_pointer

namespace merlin {

// ---------------------------------------------------------------------------------------------------------------------
// Optimizer
// ---------------------------------------------------------------------------------------------------------------------

#ifdef __NVCC__

// Update model inside a GPU parallel region
__cudevice__ void candy::Optimizer::update_gpu(candy::Model & model, const candy::Gradient & grad,
                                               std::uint64_t thread_idx, std::uint64_t n_threads) noexcept {
    using UpdaterByGpu = std::add_pointer<void(void *, candy::Model &, const candy::Gradient &, std::uint64_t,
                                               std::uint64_t) noexcept>::type;
    static std::array<UpdaterByGpu, 2> gpu_updater_func = {candy::optmz::GradDescent::update_gpu,
                                                           candy::optmz::AdaGrad::update_gpu};
    void * optimizer_algor = reinterpret_cast<void *>(&this->static_data);
    gpu_updater_func[this->static_data.index()](optimizer_algor, model, grad, thread_idx, n_threads);
}

// Copy object to pre-allocated memory region by current CUDA block of threads
__cudevice__ void * candy::Optimizer::copy_by_block(candy::Optimizer * dest_ptr, void * dynamic_data_ptr,
                                                    std::uint64_t thread_idx, std::uint64_t block_size) const {
    // shallow copy of the data
    if (thread_idx == 0) {
        dest_ptr->static_data = this->static_data;
        dest_ptr->dynamic_data = this->dynamic_data;
        dest_ptr->dynamic_size = this->dynamic_size;
    }
    __syncthreads();
    return dynamic_data_ptr;
}

// Copy object to a pre-allocated memory region by a single GPU threads
__cudevice__ void * candy::Optimizer::copy_by_thread(candy::Optimizer * dest_ptr, void * dynamic_data_ptr) const {
    // shallow copy of the data
    dest_ptr->static_data = this->static_data;
    dest_ptr->dynamic_data = this->dynamic_data;
    dest_ptr->dynamic_size = this->dynamic_size;
    return dynamic_data_ptr;
}

#endif  // __NVCC__

}  // namespace merlin
