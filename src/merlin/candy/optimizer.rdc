// Copyright 2023 quocdang1998
#include "merlin/candy/optimizer.hpp"

#include <cstddef>  // offsetof

namespace merlin {

// ---------------------------------------------------------------------------------------------------------------------
// Optimizer
// ---------------------------------------------------------------------------------------------------------------------

#ifdef __NVCC__

// Copy object to pre-allocated memory region by current CUDA block of threads
__cudevice__ void * candy::Optimizer::copy_by_block(candy::Optimizer * dest_ptr, void * dynamic_data_ptr,
                                                    std::uint64_t thread_idx, std::uint64_t block_size) const {
    if (thread_idx == 0) {
        dest_ptr->algorithm = this->algorithm;
    }
    void * returned_ptr;
    std::uintptr_t static_optimizer = reinterpret_cast<std::uintptr_t>(dest_ptr);
    static_optimizer += offsetof(candy::Optimizer, static_data);
    switch (this->algorithm) {
        case candy::OptAlgorithm::GdAlgo : {  // gradient descent
            const candy::optmz::GradDescent & optimizer = std::get<candy::optmz::GradDescent>(this->static_data);
            returned_ptr = optimizer.copy_by_block(reinterpret_cast<candy::optmz::GradDescent *>(static_optimizer),
                                                   dynamic_data_ptr, thread_idx, block_size);
            break;
        }
    }
    return returned_ptr;
}

// Copy object to a pre-allocated memory region by a single GPU threads
__cudevice__ void * candy::Optimizer::copy_by_thread(candy::Optimizer * dest_ptr, void * dynamic_data_ptr) const {
    dest_ptr->algorithm = this->algorithm;
    void * returned_ptr;
    std::uintptr_t static_optimizer = reinterpret_cast<std::uintptr_t>(dest_ptr);
    static_optimizer += offsetof(candy::Optimizer, static_data);
    switch (this->algorithm) {
        case candy::OptAlgorithm::GdAlgo : {  // gradient descent
            const candy::optmz::GradDescent & optimizer = std::get<candy::optmz::GradDescent>(this->static_data);
            returned_ptr = optimizer.copy_by_thread(reinterpret_cast<candy::optmz::GradDescent *>(static_optimizer),
                                                    dynamic_data_ptr);
            break;
        }
    }
    return returned_ptr;
}

#endif  // __NVCC__

}  // namespace merlin
