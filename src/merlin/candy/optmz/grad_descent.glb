// Copyright 2023 quocdang1998
#include "merlin/candy/optmz/grad_descent.hpp"

namespace merlin {

// Kernel creating object on GPU
__global__ static void create_kernel(candy::optmz::GradDescent ** p_ref_grad_descent, double learning_rate) {
    *p_ref_grad_descent = new candy::optmz::GradDescent(learning_rate);
}

// Kernel deleting object on GPU
__global__ static void delete_kernel(candy::optmz::GradDescent * p_grad_descent) {
    delete p_grad_descent;
}

// Create an object on GPU by the GPU
candy::optmz::GradDescent * candy::optmz::GradDescent::new_gpu(double learning_rate) {
    ::cudaStream_t stream = reinterpret_cast<::cudaStream_t>(0);
    candy::optmz::GradDescent ** p_ref_grad_descent_gpu;
    ::cudaMalloc(&p_ref_grad_descent_gpu, sizeof(candy::optmz::GradDescent *));
    create_kernel<<<1, 1, 0, stream>>>(p_ref_grad_descent_gpu, learning_rate);
    candy::optmz::GradDescent * result;
    ::cudaMemcpy(&result, p_ref_grad_descent_gpu, sizeof(candy::optmz::GradDescent *), ::cudaMemcpyDeviceToHost);
    ::cudaFree(p_ref_grad_descent_gpu);
    return result;
}

// Destroy an object by GPU
void candy::optmz::GradDescent::delete_gpu(candy::optmz::GradDescent * p_optimizer) {
    ::cudaStream_t stream = reinterpret_cast<::cudaStream_t>(0);
    delete_kernel<<<1, 1, 0, stream>>>(p_optimizer);
}

}  // namespace merlin
