// Copyright 2022 quocdang1998
#include "merlin/cuda/device.hpp"

#include "merlin/logger.hpp"  // merlin::Fatal, merlin::HostDevError, merlin::cuda_runtime_error

namespace merlin {

// ---------------------------------------------------------------------------------------------------------------------
// Device
// ---------------------------------------------------------------------------------------------------------------------

// Construct a device from its ID
__cuhostdev__ cuda::Device::Device(int id) {
#ifdef __MERLIN_CUDA__
    int limit = cuda::Device::get_num_gpu();
    if ((id < 0) || (id >= limit)) {
        HostDevError<cuda_runtime_error>("Invalid ID of GPU (expected value between 0 and less than %d).\n", limit);
    }
    this->id_ = id;
#else
    Fatal<cuda_compile_error>("Enable option MERLIN_CUDA at compilation to use this feature.\n");
#endif  // __MERLIN_CUDA__
}

// Get instance point to current GPU
__cuhostdev__ cuda::Device cuda::Device::get_current_gpu(void) {
#ifdef __MERLIN_CUDA__
    int current_device;
    ::cudaGetDevice(&current_device);
    return cuda::Device(current_device);
#else
    Fatal<cuda_compile_error>("Enable option MERLIN_CUDA at compilation to use this feature.\n");
    return 0;
#endif  // __MERLIN_CUDA__
}

// Get total number of GPU
__cuhostdev__ std::uint64_t cuda::Device::get_num_gpu(void) {
#ifdef __MERLIN_CUDA__
    int count;
    ::cudaGetDeviceCount(&count);
    return count;
#else
    Fatal<cuda_compile_error>("Enable option MERLIN_CUDA at compilation to use this feature.\n");
    return 0;
#endif  // __MERLIN_CUDA__
}

// Destructor
__cuhostdev__ cuda::Device::~Device(void) {}

}  // namespace merlin
