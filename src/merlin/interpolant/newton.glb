// Copyright 2022 quocdang1998
#include "merlin/interpolant/newton.hpp"

#include "merlin/array/parcel.hpp"  // merlin::array::Parcel
#include "merlin/cuda/memory.hpp"  // merlin::cuda::copy_class_to_shared_mem
#include "merlin/interpolant/cartesian_grid.hpp"  // merlin::interpolant::CartesianGrid
#include "merlin/utils.hpp"  // merlin::flatten_kernel_index, merlin::get_block_count, merlin::contiguous_to_ndim_idx

namespace merlin {

// Calculate divide difference algorithm
__device__ static void calc_newton_coeffs_single_core(const interpolant::CartesianGrid & grid, array::Parcel & coeff) {
    // get thread index and n_thread
    std::uint64_t thrd_idx = flatten_thread_index();
    std::uint64_t n_th = size_of_block();
    // loop on each dimension
    for (std::uint64_t i_dim = 0; i_dim < coeff.ndim(); i_dim++) {
        // get grid vector at current diemnsion
        const Vector<double> & grid_vector = grid.grid_vectors()[grid.ndim() - coeff.ndim() + i_dim];
        // get shape and size of previous dimensions
        intvec shape_previous_dims;
        shape_previous_dims.assign(const_cast<std::uint64_t *>(coeff.shape().begin()), i_dim);
        std::uint64_t size_previous_dims = prod_elements(shape_previous_dims);
        // get shape and size of divdiff subspace
        intvec shape_divdiff_space;
        shape_divdiff_space.assign(const_cast<std::uint64_t *>(coeff.shape().begin())+i_dim+1,
                                   const_cast<std::uint64_t *>(coeff.shape().end()));
        std::uint64_t size_divdiff_space = prod_elements(shape_divdiff_space);
        // loop on each previous dims point
        for (std::int64_t i_previous_dims = thrd_idx; i_previous_dims < size_previous_dims; i_previous_dims += n_th) {
            intvec index_previous_dims = contiguous_to_ndim_idx(i_previous_dims, shape_previous_dims);
            // loop on indices of current dim for divide difference
            for (std::uint64_t i = 1; i < coeff.shape()[i_dim]; i++) {
                for (std::uint64_t k = coeff.shape()[i_dim]-1; k >= i; k--) {
                    // loop on each point in divdiff space
                    for (std::uint64_t i_divdiff_space = 0; i_divdiff_space < size_divdiff_space; i_divdiff_space++) {
                        intvec index_divdiff_space = contiguous_to_ndim_idx(i_divdiff_space, shape_divdiff_space);
                        intvec point_index_k = interpolant::merge_3vectors(index_previous_dims, {k},
                                                                           index_divdiff_space);
                        intvec point_index_k_1 = interpolant::merge_3vectors(index_previous_dims, {k-1},
                                                                             index_divdiff_space);
                        double divdiff_result = (coeff[point_index_k] - coeff[point_index_k_1]);
                        divdiff_result /= grid_vector[k] - grid_vector[k-i];
                        intvec point_index_result = std::move(point_index_k);
                        coeff[point_index_result] = divdiff_result;
                    }
                }
            }
        }
        __syncthreads();
    }
}

// Calculate divide difference by a single thread on GPU
__global__ static void calc_single_core_kernel(const interpolant::CartesianGrid * p_grid, array::Parcel * p_coeff) {
    // copy meta data to GPU
    extern __shared__ char share_ptr[];
    auto shared_mem_tuple = cuda::copy_class_to_shared_mem(share_ptr, *p_grid, *p_coeff);
    interpolant::CartesianGrid * p_grid_shared = std::get<0>(shared_mem_tuple);
    array::Parcel * p_coeff_shared = std::get<1>(shared_mem_tuple);
    calc_newton_coeffs_single_core(*p_grid_shared, *p_coeff_shared);
}

// Call coefficient calculation on single core
void interpolant::call_newton_coeff_kernel(const interpolant::CartesianGrid * p_grid, array::Parcel * p_coeff,
                                           std::uint64_t shared_mem_size, std::uintptr_t stream_ptr,
                                           std::uint64_t n_thread) {
    ::cudaStream_t cuda_stream = reinterpret_cast<::cudaStream_t>(stream_ptr);
    calc_single_core_kernel<<<1, n_thread, shared_mem_size, cuda_stream>>>(p_grid, p_coeff);
}

}  // namespace merlin
