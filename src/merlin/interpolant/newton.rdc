// Copyright 2022 quocdang1998
#include "merlin/interpolant/newton.hpp"

#include "merlin/array/array.hpp"  // merlin::array::Array
#include "merlin/array/parcel.hpp"  // merlin::array::Parcel
#include "merlin/interpolant/cartesian_grid.hpp"  // merlin::interpolant::CartesianGrid
#include "merlin/utils.hpp"  // merlin::prod_elements, merlin::contiguous_to_ndim_idx

namespace merlin {

// Concatenate 3 intvec
__cuhostdev__ intvec interpolant::merge_3vectors(const intvec & v1, std::uint64_t v2, const intvec & v3,
                                                 std::uint64_t * data_ptr) {
    intvec result;
    if (data_ptr != nullptr) {
        result.assign(data_ptr, v1.size() + 1 + v3.size());
    } else {
        result = intvec(v1.size() + 1 + v3.size());
    }
    for (std::uint64_t i = 0; i < v1.size(); i++) {
        result[i] = v1[i];
    }
    result[v1.size()] = v2;
    for (std::uint64_t i = 0; i < v3.size(); i++) {
        result[1+v1.size()+i] = v3[i];
    }
    return result;
}

}  // namespace merlin
