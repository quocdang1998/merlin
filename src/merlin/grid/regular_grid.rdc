// Copyright 2023 quocdang1998
#include "merlin/grid/regular_grid.hpp"

namespace merlin {

// ---------------------------------------------------------------------------------------------------------------------
// RegularGrid
// ---------------------------------------------------------------------------------------------------------------------

// Write coordinate of point to a pre-allocated memory given flatten index
__cuhostdev__ void grid::RegularGrid::get(std::uint64_t index, double * point_data) const noexcept {
    const double * point_coordinate = this->grid_data_.data() + index * this->ndim_;
    for (std::uint64_t i_dim = 0; i_dim < this->ndim_; i_dim++) {
        point_data[i_dim] = point_coordinate[i_dim];
    }
}

#ifdef __NVCC__

// Copy to shared memory
__cudevice__ void * grid::RegularGrid::copy_by_block(grid::RegularGrid * dest_ptr, void * grid_data_ptr,
                                                     std::uint64_t thread_idx, std::uint64_t block_size) const {
    // shallow copy of grid data
    if (thread_idx == 0) {
        dest_ptr->grid_data_.data() = const_cast<double *>(this->grid_data_.data());
        dest_ptr->grid_data_.size() = this->grid_data_.size();
        dest_ptr->ndim_ = this->ndim_;
        dest_ptr->num_points_ = this->num_points_;
    }
    __syncthreads();
    return grid_data_ptr;
}

// Copy to shared memory
__cudevice__ void * grid::RegularGrid::copy_by_thread(grid::RegularGrid * dest_ptr, void * grid_data_ptr) const {
    // shallow copy of grid data
    dest_ptr->grid_data_.data() = const_cast<double *>(this->grid_data_.data());
    dest_ptr->grid_data_.size() = this->grid_data_.size();
    dest_ptr->ndim_ = this->ndim_;
    dest_ptr->num_points_ = this->num_points_;
    return grid_data_ptr;
}

#endif  // __NVCC__

}  // namespace merlin
