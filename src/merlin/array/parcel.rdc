// Copyright 2022 quocdang1998
#include "merlin/array/parcel.hpp"

#include "merlin/array/operation.hpp"  // merlin::array::contiguous_strides
#include "merlin/logger.hpp"           // CUDAERR
#include "merlin/utils.hpp"            // merlin::inner_prod, merlin::contiguous_to_ndim_idx

namespace merlin {

// ---------------------------------------------------------------------------------------------------------------------
// Parcel
// ---------------------------------------------------------------------------------------------------------------------

#ifdef __NVCC__

// Get reference to an element at a given n-dim index
__cudevice__ double & array::Parcel::operator[](const intvec & index) {
    // calculate strides
    std::uint64_t strides = inner_prod(index, this->strides_);
    double * element_ptr = reinterpret_cast<double *>(reinterpret_cast<std::uintptr_t>(this->data_) + strides);
    return *element_ptr;
}

// Get reference to an element at a given C-contiguous index
__cudevice__ double & array::Parcel::operator[](std::uint64_t index) {
    // calculate index vector
    intvec index_ = contiguous_to_ndim_idx(index, this->shape_);
    return this->operator[](index_);
}

// Get const reference to an element at a given n-dim index
__cudevice__ const double & array::Parcel::operator[](const intvec & index) const {
    // calculate strides
    std::uint64_t strides = inner_prod(index, this->strides_);
    double * element_ptr = reinterpret_cast<double *>(reinterpret_cast<std::uintptr_t>(this->data_) + strides);
    return *element_ptr;
}

// Get constant reference to an element at a given C-contiguous index
__cudevice__ const double & array::Parcel::operator[](std::uint64_t index) const {
    // calculate index vector
    intvec index_ = contiguous_to_ndim_idx(index, this->shape_);
    return this->operator[](index_);
}

// Copy to shared memory
__cudevice__ void * array::Parcel::copy_by_block(array::Parcel * dest_ptr, void * shape_strides_ptr,
                                                 std::uint64_t thread_idx, std::uint64_t block_size) const {
    // copy pointer to data and size
    if (thread_idx == 0) {
        dest_ptr->data_ = this->data_;
        dest_ptr->size_ = this->size_;
    }
    __syncthreads();
    // copy shape and strides
    void * strides_data = this->shape_.copy_by_block(&(dest_ptr->shape_), shape_strides_ptr, thread_idx, block_size);
    void * result = this->strides_.copy_by_block(&(dest_ptr->strides_), strides_data, thread_idx, block_size);
    return result;
}

// Copy to shared memory
__cudevice__ void * array::Parcel::copy_by_thread(array::Parcel * dest_ptr, void * shape_strides_ptr) const {
    // copy meta data
    dest_ptr->data_ = this->data_;
    dest_ptr->size_ = this->size_;
    // copy shape and strides
    void * strides_data = this->shape_.copy_by_thread(&(dest_ptr->shape_), shape_strides_ptr);
    void * result = this->strides_.copy_by_thread(&(dest_ptr->strides_), strides_data);
    return result;
}

#endif  // __NVCC__

}  // namespace merlin
