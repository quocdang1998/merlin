// Copyright 2022 quocdang1998
#include "merlin/array/array.hpp"

#include <cinttypes>  // PRIu64

#include "merlin/env.hpp"  // merlin::Environment
#include "merlin/logger.hpp"  // FAILURE, throw_linux_last_error, throw_windows_last_error
#include "merlin/platform.hpp"  // __MERLIN_LINUX__, __MERLIN_WINDOWS__

#if defined(__MERLIN_WINDOWS__)
#include <windows.h>  // GetLastError, VirtualAlloc, VirtualFree, VirtualLock, VirtualUnlock
#elif defined(__MERLIN_LINUX__)
#include <sys/mman.h>  // mlock, posix_memalign
#include <unistd.h>  // sysconf
#endif

namespace merlin {

// --------------------------------------------------------------------------------------------------------------------
// Memory lock (allocated array always stays in the RAM)
// --------------------------------------------------------------------------------------------------------------------

// Allocate non pageable memory
double * allocate_memory(std::uint64_t size) {
    double * result = nullptr;
    if (Environment::cpu_mem_limit < size*sizeof(double)) {
        FAILURE(std::out_of_range, "Cannot allocate array with size bigger than limit (memory available %" PRIu64
                ", allocation demands %" PRIu64 ".\n", Environment::cpu_mem_limit, size*sizeof(double));
    }
    #ifndef __MERLIN_CUDA__
        #if defined(__MERLIN_WINDOWS__)
        void * temp_ = ::VirtualAlloc(NULL, sizeof(double) * size, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
        result = reinterpret_cast<double *>(temp_);
        if (result == nullptr) {
            std::string err_message = throw_windows_last_error(::GetLastError());
            FAILURE(std::runtime_error, "Allocate memory failed with message \"%s\".\n", err_message.c_str());
        }
        bool success = ::VirtualLock(result, sizeof(double) * size);
        if (!success) {
            ::VirtualFree(result, sizeof(double)*size, MEM_RELEASE);
            std::string err_message = throw_windows_last_error(::GetLastError());
            FAILURE(std::runtime_error, "Lock memory failed with message \"%s\".\n", err_message.c_str());
        }
        #elif defined(__MERLIN_LINUX__)
        size_t array_size = sizeof(double) * size;
        int failed = ::posix_memalign(reinterpret_cast<void **>(&result), ::sysconf(_SC_PAGESIZE), array_size);
        if (failed) {
            FAILURE(std::runtime_error, "Allocate memory failed.\n");
        }
        int err_ = ::mlock(result, sizeof(double) * size);
        if (err_ == -1) {
            ::free(result);
            std::string err_message = throw_linux_last_error();
            FAILURE(std::runtime_error, "Exclusive lock file failed with message \"%s\".\n", err_message.c_str());
        }
        #endif
    #else
    ::cudaError_t err_ = ::cudaMallocHost(&result, sizeof(double) * size);
    if (err_ != 0) {
        FAILURE(cuda_runtime_error, "Allocate non-pageable memory failed with message \"%s\".\n",
                ::cudaGetErrorString(err_));
    }
    #endif  // __MERLIN_CUDA__
    Environment::cpu_mem_limit -= size * sizeof(double);
    return result;
}

// Pin memory to RAM
void cuda_pin_memory(double * ptr, std::uint64_t n_elem) {
    #ifdef __MERLIN_CUDA__
    ::cudaError_t err_ = ::cudaHostRegister(ptr, sizeof(double) * n_elem, cudaHostRegisterDefault);
    if (err_ != 0) {
        FAILURE(cuda_runtime_error, "Pin pageable memory failed with message \"%s\".\n", ::cudaGetErrorString(err_));
    }
    #endif  // __MERLIN_CUDA__
}

// Free non pageable memory
void free_memory(double * ptr, std::uint64_t size) {
    #ifndef __MERLIN_CUDA__
    #if defined(__MERLIN_WINDOWS__)
        bool success = ::VirtualUnlock(ptr, sizeof(double) * size);
        if (!success) {
            std::string err_message = throw_windows_last_error(::GetLastError());
            FAILURE(std::runtime_error, "Unlock memory failed with message \"%s\".\n", err_message.c_str());
        }
        ::VirtualFree(ptr, sizeof(double) * size, MEM_RELEASE);
        #elif defined(__MERLIN_LINUX__)
        int err_ = ::munlock(ptr, sizeof(double) * size);
        if (err_ == -1) {
            std::string err_message = throw_linux_last_error();
            FAILURE(std::runtime_error, "Exclusive lock file failed with message \"%s\".\n", err_message.c_str());
        }
        ::free(ptr);
        #endif
    #else
    ::cudaError_t err_ = ::cudaFreeHost(ptr);
    if (err_ != 0) {
        FAILURE(cuda_runtime_error, "Free non-pageable memory failed with message \"%s\".\n",
                ::cudaGetErrorName(err_));
    }
    #endif  // __MERLIN_CUDA__
    Environment::cpu_mem_limit += size * sizeof(double);
}

}  // namespace merlin
