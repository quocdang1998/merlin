// Copyright 2022 quocdang1998
#include "spgrid/utils.hpp"

namespace spgrid {

// ---------------------------------------------------------------------------------------------------------------------
// Utils
// ---------------------------------------------------------------------------------------------------------------------

// Get index of element in full grid of an hiearchical grid
__cuhostdev__ std::uint64_t get_hiearchical_index(std::uint64_t subgrid_idx, std::uint64_t level,
                                                  std::uint64_t fullgrid_shape) noexcept {
    std::uint64_t hiearchical_index = 0;
    if (level == 0) {
        hiearchical_index = (subgrid_idx == 0) ? 0 : (fullgrid_shape - 1);
    } else {
        std::uint64_t jump = (fullgrid_shape - 1) >> level;
        hiearchical_index = jump * (2*subgrid_idx + 1);
    }
    return hiearchical_index;
}

// Get number of points inside a level
__cuhostdev__ std::uint64_t get_npoint_in_level(const merlin::intvec & ndlevel) noexcept {
    std::uint64_t npoint = 1;
    for (std::uint64_t i = 0; i < ndlevel.size(); i++) {
        npoint *= shape_from_level(ndlevel[i]);
    }
    return npoint;
}

// Get shape of the sub-grid from the level vector
__cuhostdev__ merlin::intvec ndlevel_to_shape(const merlin::intvec & ndlevel,
                                              std::uint64_t * subgrid_shape_data) noexcept {
    merlin::intvec subgrid_shape;
    if (subgrid_shape_data != nullptr) {
        subgrid_shape.assign(subgrid_shape_data, ndlevel.size());
    } else {
        subgrid_shape = merlin::intvec(ndlevel.size());
    }
    for (std::uint64_t i = 0; i < ndlevel.size(); i++) {
        subgrid_shape[i] = shape_from_level(ndlevel[i]);
    }
    return subgrid_shape;
}

// Get index in full grid from sub-grid index
__cuhostdev__ merlin::intvec fullgrid_idx_from_subgrid(std::uint64_t subgrid_idx, const merlin::intvec & ndlevel,
                                                       const merlin::intvec & fullgrid_shape,
                                                       std::uint64_t * index_data) noexcept {
    // assign result
    merlin::intvec fullgrid_idx;
    if (index_data != nullptr) {
        fullgrid_idx.assign(index_data, ndlevel.size());
    } else {
        fullgrid_idx = merlin::intvec(ndlevel.size());
    }
    // calculate shape of subgrid and ndim index in subgrid
    std::uint64_t cum_prod = 1;
    std::uint64_t shape_previous_dim = shape_from_level(ndlevel[ndlevel.size() - 1]);
    fullgrid_idx[ndlevel.size() - 1] = subgrid_idx % shape_previous_dim;
    for (std::int64_t i = ndlevel.size() - 2; i >= 0; i--) {
        cum_prod *= shape_previous_dim;
        shape_previous_dim = shape_from_level(ndlevel[i]);
        fullgrid_idx[i] = (subgrid_idx / cum_prod) % shape_previous_dim;
    }
    for (std::uint64_t i = 0; i < ndlevel.size(); i++) {
        fullgrid_idx[i] = get_hiearchical_index(fullgrid_idx[i], ndlevel[i], fullgrid_shape[i]);
    }
    return fullgrid_idx;
}

}  // namespace spgrid
